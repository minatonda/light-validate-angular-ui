{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./lib/dist/fesm2015/light-validate-angular-ui.js","./src/app/app.component.html","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/environments/environment.ts","./src/light-validate/light-rule-must-be-the-same.ts","./src/light-validate/light-rule-must-not-be-the-same.ts","./src/light-validate/light-rule-only-number.ts","./src/light-validate/light-rule-only-text.ts","./src/light-validate/light-rule-required.ts","./src/light-validate/user.light-mapping.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACyE;AAC3E;;AAE1C,qBAAqB,4DAAc;;AAEnC;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,qBAAqB,GAAG;AAC1E,KAAK,OAAO,wDAAU;AACtB;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,4DAAM;AACV;AACA,2BAA2B,wDAAU;AACrC,IAAI,+DAAS;AACb;AACA,KAAK;AACL,IAAI,qDAAO,IAAI,4DAAM;AACrB;;AAEA;AACA;AACA;AACA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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { __decorate, __param } from 'tslib';\nimport { InjectionToken, EventEmitter, Inject, ElementRef, Input, Output, Directive, NgModule } from '@angular/core';\nimport { validate } from 'light-validate';\n\nconst RESOLVER = new InjectionToken('ui-light-validate.resolver');\n\nlet UiLightValidateDirective = class UiLightValidateDirective {\n    constructor(resolver, el) {\n        this.resolver = resolver;\n        this.el = el;\n        this.onValidate = new EventEmitter();\n    }\n    ngOnInit() {\n        this.initialize(this.el.nativeElement);\n    }\n    initialize(el) {\n        // criar span que irá conter o erro.\n        const htmlErrorElement = this.getHtmlErrorElement(el);\n        if (this.isIconEnabled(el)) {\n            // criar div que irá conter o icone referente a validação\n            const htmlIconElement = this.getHtmlIconElement(el);\n            !el.parentNode.contains(htmlIconElement) && el.parentNode.insertBefore(htmlIconElement, el);\n        }\n        const onValidateThen = () => {\n            //remover span com classe 'error' referente ao campo do DOM...caso já esteja presente\n            el.parentNode.contains(htmlErrorElement) && el.parentNode.removeChild(htmlErrorElement);\n            el.parentElement.classList.remove(this.getElementInvalidClass(el));\n            el.parentElement.classList.add(this.getElementValidClass(el));\n            //disparar callback externo onValidate\n            this.onValidate.emit(null);\n        };\n        const onValidateCatch = (exceptions) => {\n            const exception = exceptions.shift();\n            if (exception) {\n                //setar texto do span com classe 'error' referente ao campo do DOM...\n                htmlErrorElement.innerHTML = this.resolver ? this.resolver.label(exception) : exception.code;\n                //adicionar span com classe 'error' referente ao campo do DOM...caso já não esteja presente\n                !el.parentNode.contains(htmlErrorElement) && el.parentNode.appendChild(htmlErrorElement);\n                el.parentElement.classList.add(this.getElementInvalidClass(el));\n                el.parentElement.classList.remove(this.getElementValidClass(el));\n                //disparar callback externo onValidate\n                this.onValidate.emit(exception);\n            }\n            else {\n                onValidateThen();\n            }\n        };\n        const onValidateFinally = () => {\n        };\n        let firstTrigger = true;\n        if (this.isValidateOnBlurEnabled(el)) {\n            el.onblur = (event) => {\n                firstTrigger = false;\n                validate(this.target, this.validate, this.property)\n                    .then(() => onValidateThen())\n                    .catch((errors) => onValidateCatch(errors))\n                    .finally(() => onValidateFinally());\n            };\n        }\n        ;\n        if (this.isValidateOnChangeEnabled(el)) {\n            el.onchange = (event) => {\n                firstTrigger = false;\n                validate(this.target, this.validate, this.property)\n                    .then(() => onValidateThen())\n                    .catch((errors) => onValidateCatch(errors))\n                    .finally(() => onValidateFinally());\n            };\n        }\n        if (this.isValidateOnBlurEnabled(el) || this.isValidateOnChangeEnabled(el)) {\n            el.onkeyup = (event) => {\n                const isKeydown = el.getAttribute('modal-rule-keydown');\n                if (!firstTrigger || isKeydown) {\n                    validate(this.target, this.validate, this.property)\n                        .then(() => onValidateThen())\n                        .catch((errors) => onValidateCatch(errors))\n                        .finally(() => onValidateFinally());\n                }\n            };\n        }\n        else if (this.isValidateOnKeyUpEnabled(el)) {\n            el.onkeyup = (event) => {\n                validate(this.target, this.validate, this.property)\n                    .then(() => onValidateThen())\n                    .catch((errors) => onValidateCatch(errors))\n                    .finally(() => onValidateFinally());\n            };\n        }\n        ;\n    }\n    isValidateOnBlurEnabled(el) {\n        return this.getBoolValueFromAttr(el, 'ui-light-validate-on-blur', true);\n    }\n    isValidateOnChangeEnabled(el) {\n        return this.getBoolValueFromAttr(el, 'ui-light-validate-on-change', true);\n    }\n    isValidateOnKeyUpEnabled(el) {\n        return this.getBoolValueFromAttr(el, 'ui-light-validate-on-keyup', true);\n    }\n    isIconEnabled(el) {\n        return this.getBoolValueFromAttr(el, 'ui-light-validate-icon-enabled', false);\n    }\n    getElementInvalidClass(el) {\n        return el.getAttribute('ui-light-validate-invalid-class') || 'light-invalid';\n    }\n    getElementValidClass(el) {\n        return el.getAttribute('ui-light-validate-valid-class') || 'light-valid';\n    }\n    getElementMessageClass(el) {\n        return el.getAttribute('ui-light-validate-message-class') || 'light-message';\n    }\n    getBoolValueFromAttr(el, attr, defaultValue) {\n        if ((el.getAttribute(attr) === undefined || el.getAttribute(attr) === '' || el.getAttribute(attr) === null)) {\n            return defaultValue;\n        }\n        else {\n            return (el.getAttribute(attr) == 'true');\n        }\n    }\n    getHtmlIconElement(el) {\n        const htmlDivIconElement = document.createElement('div');\n        htmlDivIconElement.setAttribute('class', 'light-valid-icon');\n        const htmlIconElement = document.createElement('i');\n        htmlDivIconElement.appendChild(htmlIconElement);\n        return htmlDivIconElement;\n    }\n    getHtmlErrorElement(el) {\n        const htmlSpanElement = document.createElement('span');\n        const htmlSpanElementClass = this.getElementMessageClass(el);\n        htmlSpanElement.setAttribute('class', htmlSpanElementClass);\n        return htmlSpanElement;\n    }\n};\nUiLightValidateDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [RESOLVER,] }] },\n    { type: ElementRef }\n];\n__decorate([\n    Input('UiLightValidate')\n], UiLightValidateDirective.prototype, \"validate\", void 0);\n__decorate([\n    Input('UiLightProperty')\n], UiLightValidateDirective.prototype, \"property\", void 0);\n__decorate([\n    Input('UiLightTarget')\n], UiLightValidateDirective.prototype, \"target\", void 0);\n__decorate([\n    Output('UiLightOnValidate')\n], UiLightValidateDirective.prototype, \"onValidate\", void 0);\nUiLightValidateDirective = __decorate([\n    Directive({\n        selector: '[UiLightValidate]'\n    }),\n    __param(0, Inject(RESOLVER))\n], UiLightValidateDirective);\n\nvar UiLightValidateModule_1;\nconst ɵ0 = undefined;\nlet UiLightValidateModule = UiLightValidateModule_1 = class UiLightValidateModule {\n    static forRoot(resolver) {\n        return {\n            ngModule: UiLightValidateModule_1,\n            providers: [\n                { provide: RESOLVER, useValue: resolver }\n            ]\n        };\n    }\n};\nUiLightValidateModule = UiLightValidateModule_1 = __decorate([\n    NgModule({\n        declarations: [UiLightValidateDirective],\n        exports: [UiLightValidateDirective],\n        providers: [\n            { provide: RESOLVER, useValue: ɵ0 }\n        ]\n    })\n], UiLightValidateModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { UiLightValidateDirective, UiLightValidateModule, ɵ0, RESOLVER as ɵa };\n//# sourceMappingURL=light-validate-angular-ui.js.map\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"container-fluid pt-2\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12 col-md-12 form-group\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-12 form-group\\\">\\n              <label class=\\\"control-label\\\">Name</label>\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"appModel.name\\\"\\n                [UiLightValidate]=\\\"lightRuleMapping\\\" UiLightProperty=\\\"name\\\" [UiLightTarget]=\\\"appModel\\\">\\n            </div>\\n            <div class=\\\"col-12 form-group\\\">\\n              <label class=\\\"control-label\\\">UserName</label>\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Username\\\" [(ngModel)]=\\\"appModel.username\\\"\\n                [UiLightValidate]=\\\"lightRuleMapping\\\" UiLightProperty=\\\"username\\\" [UiLightTarget]=\\\"appModel\\\">\\n            </div>\\n            <div class=\\\"col-12 form-group\\\">\\n              <label class=\\\"control-label\\\">Password</label>\\n              <input class=\\\"form-control\\\" type=\\\"number\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"appModel.password\\\"\\n                [UiLightValidate]=\\\"lightRuleMapping\\\" UiLightProperty=\\\"password\\\" [UiLightTarget]=\\\"appModel\\\">\\n            </div>\\n            <div class=\\\"col-12 form-group\\\">\\n              <label class=\\\"control-label\\\">ConfirmPassword</label>\\n              <input class=\\\"form-control\\\" type=\\\"number\\\" placeholder=\\\"Confirm Password\\\"\\n                [(ngModel)]=\\\"appModel.confirmPassword\\\" [UiLightValidate]=\\\"lightRuleMapping\\\"\\n                UiLightProperty=\\\"confirmPassword\\\" [UiLightTarget]=\\\"appModel\\\">\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-12 col-md-12 form-group\\\">\\n      <b>See code below</b>\\n      <hr>\\n    </div>\\n    <div class=\\\"col-12 col-md-12 form-group\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          component.ts\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <pre>\\n            <code>{{getHtmlComponent()}}</code>\\n          </pre>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-12 col-md-12 form-group\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          model.light-mapping.ts\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <pre>\\n                <code>{{getHtmlLightMapping()}}</code>\\n              </pre>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-12 col-md-12 form-group\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          component.html\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <pre>\\n              <code>{{getHtmlTemplate()}}</code>\\n            </pre>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\nimport { UserLightMapping } from 'src/light-validate/user.light-mapping';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  public title = 'light-validate-angular-ui';\n\n  constructor() { }\n\n  public lightRuleMapping = UserLightMapping;\n\n  public appModel: Partial<UserLightMapping> = {};\n\n  public getHtmlTemplate(){\n    return require('./template.json');\n  }\n\n  public getHtmlComponent(){\n    return require('./component.json');\n  }\n\n  public getHtmlLightMapping(){\n    return require('./lightmapping.json');\n  }\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { UiLightValidateModule } from 'light-validate-angular-ui';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    FormsModule,\n    UiLightValidateModule.forRoot({\n      label: (exception) => {\n        return `${exception.code} ${exception.property}`;\n      }\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { LightRule } from 'light-validate';\n\nexport const LightRuleMustBeTheSame = (property) => {\n  const rule: LightRule = async (value, target) => {\n    if (value !== target[property]) {\n      throw 'Value must be the same';\n    }\n  }\n  return rule;\n}\n","import { LightRule } from 'light-validate';\n\nexport const LightRuleMustNotBeTheSame = (property) => {\n  const rule: LightRule = async (value, target) => {\n    if (value === target[property]) {\n      throw 'Value must not be the same';\n    }\n  }\n  return rule;\n}\n","import { LightRule } from 'light-validate';\n\nexport const LightRuleOnlyNumber: LightRule = async (value, target) => {\n  if ((typeof value) !== 'number') {\n    throw 'Value is not a Number';\n  }\n}\n","import { LightRule } from 'light-validate';\n\nexport const LightRuleOnlyText: LightRule = async (value, target) => {\n  if ((typeof value) !== 'string') {\n    throw 'Value is not a Text';\n  }\n}\n","import { LightRule } from 'light-validate';\n\nexport const LightRuleRequired: LightRule = async (value, target) => {\n  if (!value) {\n    throw 'Value must be not empty';\n  }\n}\n","import { LightValidate } from 'light-validate';\nimport { LightRuleOnlyText } from './light-rule-only-text';\nimport { LightRuleOnlyNumber } from './light-rule-only-number';\nimport { LightRuleMustNotBeTheSame } from './light-rule-must-not-be-the-same';\nimport { LightRuleMustBeTheSame } from './light-rule-must-be-the-same';\nimport { LightRuleRequired } from './light-rule-required';\n\nexport class UserLightMapping {\n\n  @LightValidate(LightRuleRequired, LightRuleOnlyText)\n  public name: string = undefined;\n\n  @LightValidate(LightRuleRequired, LightRuleOnlyText, LightRuleMustNotBeTheSame('name'))\n  public username: string = undefined;\n\n  @LightValidate(LightRuleRequired, LightRuleOnlyNumber)\n  public password: string = undefined;\n\n  @LightValidate(LightRuleRequired, LightRuleOnlyNumber, LightRuleMustBeTheSame('password'))\n  public confirmPassword: string = undefined;\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}